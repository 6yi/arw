// Code generated by "stringer -type=IFDtag"; DO NOT EDIT.

package arw

import "fmt"

const _IFDtag_name = "NewSubFileTypeImageWidthImageHeightBitsPerSampleCompressionPhotometricInterpretationImageDescriptionMakeModelStripOffsetsOrientationSamplesPerPixelRowsPerStripStripByteCountsXResolutionYResolutionPlanarConfigurationResolutionUnitSoftwareDateTimeSubIFDsJPEGInterchangeFormatJPEGInterchangeFormatLengthYCbCrPositioningShotInfoSonyRawFileTypeSR2SubIFDOffsetSR2SubIFDLengthSR2SubIFDKeyIDC_IFDIDC2_IFDMRWInfoCFARepeatPatternDimCFAPattern2ExposureTimeFNumberExifTagExposureProgramSpectralSensitivityGPSTagISOSpeedRatingsOECFSensitivityTypeRecommendedExposureIndexExifVersionDateTimeOriginalDateTimeDigitizedComponentsConfigurationCompressedBitsPerPixelShutterSpeedValueApertureValueBrightnessValueExposureBiasValueMaxApertureValueSubjectDistanceMeteringModeLightSourceFlashFocalLengthSubjectAreaMakerNoteUserCommentSubsecTimeSubsecTimeOriginalSubsecTimeDigitizedTag9400FlashpixVersionColorSpacePixelXDimensionPixelYDimensionRelatedSoundFileInteroperabilityTagFlashEnergySpatialFrequencyResponseFocalPlaneXResolutionFocalPlaneYResolutionFocalPlaneResolutionUnitSubjectLocationExposureIndexSensingMethodFileSourceSceneTypeCFAPatternCustomRenderedExposureModeWhiteBalanceDigitalZoomRatioFocalLengthIn35mmFilmSceneCaptureTypeGainControlContrastSaturationSharpnessDeviceSettingDescriptionSubjectDistanceRangeImageUniqueIDLensSpecificationLensModelFileFormatSonyModelIDCreativeStyleLensSpecFullImageSizePreviewImageSizePrintImageMatchingDNGPrivateData"

var _IFDtag_map = map[IFDtag]string{
	254:   _IFDtag_name[0:14],
	256:   _IFDtag_name[14:24],
	257:   _IFDtag_name[24:35],
	258:   _IFDtag_name[35:48],
	259:   _IFDtag_name[48:59],
	262:   _IFDtag_name[59:84],
	270:   _IFDtag_name[84:100],
	271:   _IFDtag_name[100:104],
	272:   _IFDtag_name[104:109],
	273:   _IFDtag_name[109:121],
	274:   _IFDtag_name[121:132],
	277:   _IFDtag_name[132:147],
	278:   _IFDtag_name[147:159],
	279:   _IFDtag_name[159:174],
	282:   _IFDtag_name[174:185],
	283:   _IFDtag_name[185:196],
	284:   _IFDtag_name[196:215],
	296:   _IFDtag_name[215:229],
	305:   _IFDtag_name[229:237],
	306:   _IFDtag_name[237:245],
	330:   _IFDtag_name[245:252],
	513:   _IFDtag_name[252:273],
	514:   _IFDtag_name[273:300],
	531:   _IFDtag_name[300:316],
	12288: _IFDtag_name[316:324],
	28672: _IFDtag_name[324:339],
	29184: _IFDtag_name[339:354],
	29185: _IFDtag_name[354:369],
	29217: _IFDtag_name[369:381],
	29248: _IFDtag_name[381:388],
	29249: _IFDtag_name[388:396],
	29264: _IFDtag_name[396:403],
	33421: _IFDtag_name[403:422],
	33422: _IFDtag_name[422:433],
	33434: _IFDtag_name[433:445],
	33437: _IFDtag_name[445:452],
	34665: _IFDtag_name[452:459],
	34850: _IFDtag_name[459:474],
	34852: _IFDtag_name[474:493],
	34853: _IFDtag_name[493:499],
	34855: _IFDtag_name[499:514],
	34856: _IFDtag_name[514:518],
	34864: _IFDtag_name[518:533],
	34866: _IFDtag_name[533:557],
	36864: _IFDtag_name[557:568],
	36867: _IFDtag_name[568:584],
	36868: _IFDtag_name[584:601],
	37121: _IFDtag_name[601:624],
	37122: _IFDtag_name[624:646],
	37377: _IFDtag_name[646:663],
	37378: _IFDtag_name[663:676],
	37379: _IFDtag_name[676:691],
	37380: _IFDtag_name[691:708],
	37381: _IFDtag_name[708:724],
	37382: _IFDtag_name[724:739],
	37383: _IFDtag_name[739:751],
	37384: _IFDtag_name[751:762],
	37385: _IFDtag_name[762:767],
	37386: _IFDtag_name[767:778],
	37396: _IFDtag_name[778:789],
	37500: _IFDtag_name[789:798],
	37510: _IFDtag_name[798:809],
	37520: _IFDtag_name[809:819],
	37521: _IFDtag_name[819:837],
	37522: _IFDtag_name[837:856],
	37888: _IFDtag_name[856:863],
	40960: _IFDtag_name[863:878],
	40961: _IFDtag_name[878:888],
	40962: _IFDtag_name[888:903],
	40963: _IFDtag_name[903:918],
	40964: _IFDtag_name[918:934],
	40965: _IFDtag_name[934:953],
	41483: _IFDtag_name[953:964],
	41484: _IFDtag_name[964:988],
	41486: _IFDtag_name[988:1009],
	41487: _IFDtag_name[1009:1030],
	41488: _IFDtag_name[1030:1054],
	41492: _IFDtag_name[1054:1069],
	41493: _IFDtag_name[1069:1082],
	41495: _IFDtag_name[1082:1095],
	41728: _IFDtag_name[1095:1105],
	41729: _IFDtag_name[1105:1114],
	41730: _IFDtag_name[1114:1124],
	41985: _IFDtag_name[1124:1138],
	41986: _IFDtag_name[1138:1150],
	41987: _IFDtag_name[1150:1162],
	41988: _IFDtag_name[1162:1178],
	41989: _IFDtag_name[1178:1199],
	41990: _IFDtag_name[1199:1215],
	41991: _IFDtag_name[1215:1226],
	41992: _IFDtag_name[1226:1234],
	41993: _IFDtag_name[1234:1244],
	41994: _IFDtag_name[1244:1253],
	41995: _IFDtag_name[1253:1277],
	41996: _IFDtag_name[1277:1297],
	42016: _IFDtag_name[1297:1310],
	42034: _IFDtag_name[1310:1327],
	42036: _IFDtag_name[1327:1336],
	45056: _IFDtag_name[1336:1346],
	45057: _IFDtag_name[1346:1357],
	45088: _IFDtag_name[1357:1370],
	45098: _IFDtag_name[1370:1378],
	45099: _IFDtag_name[1378:1391],
	45100: _IFDtag_name[1391:1407],
	50341: _IFDtag_name[1407:1425],
	50740: _IFDtag_name[1425:1439],
}

func (i IFDtag) String() string {
	if str, ok := _IFDtag_map[i]; ok {
		return str
	}
	return fmt.Sprintf("IFDtag(%d)", i)
}
