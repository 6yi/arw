// Code generated by "stringer -type=IFDtag"; DO NOT EDIT.

package arw

import "fmt"

const _IFDtag_name = "NewSubFileTypeImageWidthImageHeightBitsPerSampleCompressionPhotometricInterpretationImageDescriptionMakeModelStripOffsetsOrientationSamplesPerPixelRowsPerStripStripByteCountsXResolutionYResolutionPlanarConfigurationResolutionUnitSoftwareDateTimeSubIFDsJPEGInterchangeFormatJPEGInterchangeFormatLengthYCbCrPositioningXMPShotInfoSonyRawFileTypeSonyCurveSR2SubIFDOffsetSR2SubIFDLengthSR2SubIFDKeyIDC_IFDIDC2_IFDMRWInfoCFARepeatPatternDimCFAPattern2ExposureTimeFNumberExifTagExposureProgramSpectralSensitivityGPSTagISOSpeedRatingsOECFSensitivityTypeRecommendedExposureIndexExifVersionDateTimeOriginalDateTimeDigitizedComponentsConfigurationCompressedBitsPerPixelShutterSpeedValueApertureValueBrightnessValueExposureBiasValueMaxApertureValueSubjectDistanceMeteringModeLightSourceFlashFocalLengthSubjectAreaMakerNoteUserCommentSubsecTimeSubsecTimeOriginalSubsecTimeDigitizedTag9400FlashpixVersionColorSpacePixelXDimensionPixelYDimensionRelatedSoundFileInteroperabilityTagFlashEnergySpatialFrequencyResponseFocalPlaneXResolutionFocalPlaneYResolutionFocalPlaneResolutionUnitSubjectLocationExposureIndexSensingMethodFileSourceSceneTypeCFAPatternCustomRenderedExposureModeWhiteBalanceDigitalZoomRatioFocalLengthIn35mmFilmSceneCaptureTypeGainControlContrastSaturationSharpnessDeviceSettingDescriptionSubjectDistanceRangeImageUniqueIDLensSpecificationLensModelFileFormatSonyModelIDCreativeStyleLensSpecFullImageSizePreviewImageSizePrintImageMatchingDefaultCropOriginDefaultCropSizeDNGPrivateData"

var _IFDtag_map = map[IFDtag]string{
	254:   _IFDtag_name[0:14],
	256:   _IFDtag_name[14:24],
	257:   _IFDtag_name[24:35],
	258:   _IFDtag_name[35:48],
	259:   _IFDtag_name[48:59],
	262:   _IFDtag_name[59:84],
	270:   _IFDtag_name[84:100],
	271:   _IFDtag_name[100:104],
	272:   _IFDtag_name[104:109],
	273:   _IFDtag_name[109:121],
	274:   _IFDtag_name[121:132],
	277:   _IFDtag_name[132:147],
	278:   _IFDtag_name[147:159],
	279:   _IFDtag_name[159:174],
	282:   _IFDtag_name[174:185],
	283:   _IFDtag_name[185:196],
	284:   _IFDtag_name[196:215],
	296:   _IFDtag_name[215:229],
	305:   _IFDtag_name[229:237],
	306:   _IFDtag_name[237:245],
	330:   _IFDtag_name[245:252],
	513:   _IFDtag_name[252:273],
	514:   _IFDtag_name[273:300],
	531:   _IFDtag_name[300:316],
	700:   _IFDtag_name[316:319],
	12288: _IFDtag_name[319:327],
	28672: _IFDtag_name[327:342],
	28688: _IFDtag_name[342:351],
	29184: _IFDtag_name[351:366],
	29185: _IFDtag_name[366:381],
	29217: _IFDtag_name[381:393],
	29248: _IFDtag_name[393:400],
	29249: _IFDtag_name[400:408],
	29264: _IFDtag_name[408:415],
	33421: _IFDtag_name[415:434],
	33422: _IFDtag_name[434:445],
	33434: _IFDtag_name[445:457],
	33437: _IFDtag_name[457:464],
	34665: _IFDtag_name[464:471],
	34850: _IFDtag_name[471:486],
	34852: _IFDtag_name[486:505],
	34853: _IFDtag_name[505:511],
	34855: _IFDtag_name[511:526],
	34856: _IFDtag_name[526:530],
	34864: _IFDtag_name[530:545],
	34866: _IFDtag_name[545:569],
	36864: _IFDtag_name[569:580],
	36867: _IFDtag_name[580:596],
	36868: _IFDtag_name[596:613],
	37121: _IFDtag_name[613:636],
	37122: _IFDtag_name[636:658],
	37377: _IFDtag_name[658:675],
	37378: _IFDtag_name[675:688],
	37379: _IFDtag_name[688:703],
	37380: _IFDtag_name[703:720],
	37381: _IFDtag_name[720:736],
	37382: _IFDtag_name[736:751],
	37383: _IFDtag_name[751:763],
	37384: _IFDtag_name[763:774],
	37385: _IFDtag_name[774:779],
	37386: _IFDtag_name[779:790],
	37396: _IFDtag_name[790:801],
	37500: _IFDtag_name[801:810],
	37510: _IFDtag_name[810:821],
	37520: _IFDtag_name[821:831],
	37521: _IFDtag_name[831:849],
	37522: _IFDtag_name[849:868],
	37888: _IFDtag_name[868:875],
	40960: _IFDtag_name[875:890],
	40961: _IFDtag_name[890:900],
	40962: _IFDtag_name[900:915],
	40963: _IFDtag_name[915:930],
	40964: _IFDtag_name[930:946],
	40965: _IFDtag_name[946:965],
	41483: _IFDtag_name[965:976],
	41484: _IFDtag_name[976:1000],
	41486: _IFDtag_name[1000:1021],
	41487: _IFDtag_name[1021:1042],
	41488: _IFDtag_name[1042:1066],
	41492: _IFDtag_name[1066:1081],
	41493: _IFDtag_name[1081:1094],
	41495: _IFDtag_name[1094:1107],
	41728: _IFDtag_name[1107:1117],
	41729: _IFDtag_name[1117:1126],
	41730: _IFDtag_name[1126:1136],
	41985: _IFDtag_name[1136:1150],
	41986: _IFDtag_name[1150:1162],
	41987: _IFDtag_name[1162:1174],
	41988: _IFDtag_name[1174:1190],
	41989: _IFDtag_name[1190:1211],
	41990: _IFDtag_name[1211:1227],
	41991: _IFDtag_name[1227:1238],
	41992: _IFDtag_name[1238:1246],
	41993: _IFDtag_name[1246:1256],
	41994: _IFDtag_name[1256:1265],
	41995: _IFDtag_name[1265:1289],
	41996: _IFDtag_name[1289:1309],
	42016: _IFDtag_name[1309:1322],
	42034: _IFDtag_name[1322:1339],
	42036: _IFDtag_name[1339:1348],
	45056: _IFDtag_name[1348:1358],
	45057: _IFDtag_name[1358:1369],
	45088: _IFDtag_name[1369:1382],
	45098: _IFDtag_name[1382:1390],
	45099: _IFDtag_name[1390:1403],
	45100: _IFDtag_name[1403:1419],
	50341: _IFDtag_name[1419:1437],
	50719: _IFDtag_name[1437:1454],
	50720: _IFDtag_name[1454:1469],
	50740: _IFDtag_name[1469:1483],
}

func (i IFDtag) String() string {
	if str, ok := _IFDtag_map[i]; ok {
		return str
	}
	return fmt.Sprintf("IFDtag(%d)", i)
}
